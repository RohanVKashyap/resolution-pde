Job started on babel-6-25 at Fri Jun 20 14:33:55 EDT 2025
Job ID: 5137332
GPU information:
Fri Jun 20 14:33:55 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 575.51.03              Driver Version: 575.51.03      CUDA Version: 12.9     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA RTX A6000               On  |   00000000:02:00.0 Off |                  Off |
| 30%   34C    P8             21W /  300W |       1MiB /  49140MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA RTX A6000               On  |   00000000:03:00.0 Off |                  Off |
| 30%   34C    P8             28W /  300W |       1MiB /  49140MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
CUDA devices:
CUDA_VISIBLE_DEVICES: 0,1
Using device: cuda
[2025-06-20 14:34:00,917][root][INFO] - model:
  _target_: models.CNO2d.CNO2d
  in_dim: 3
  out_dim: 3
  N_layers: 1
  N_res: 4
  N_res_neck: 4
  channel_multiplier: 16
  use_bn: false
dataset:
  reduced_batch: 1
  reduced_resolution: 1
  reduced_resolution_t: 1
  window_size: 15
  original_res: 512
  train_resolution: 512
  multi_res:
  - 1
  - 4
  s: 512
  train_mres: false
  pde: navier_stokes_0
  data_path1: data/pdebench/ns_incom_inhom_2d_512-0.hdf5
training:
  batch_size: 32
  epochs: 2
  learning_rate: 0.001
  use_normalizer: false
project_name: ${dataset.pde}_${hydra:runtime.choices.model}
checkpoint_dir: checkpoints

Project name: navier_stokes_0_cno_2d/cno_2d
Model name: models.CNO2d.CNO2d
PDE Dataset: navier_stokes_0
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Combined data shape: (4, 1000, 512, 512, 3)
Current Spatial Size: 512
x shape: torch.Size([3992, 3, 512, 512])
y shape: torch.Size([3992, 3, 512, 512])
---------Computing min-max normalization statistics---------------
Input data range: [-2.759037, 2.506686]
Output data range: [-2.752234, 2.492671]
Train dataset size: 3193
Validation dataset size: 399
Test dataset size: 400
<class 'torch.Tensor'> 0.524234414100647 0.5250188708305359 0.09849084168672562 0.09881822764873505
Sample Input shape: torch.Size([32, 3, 512, 512])
Sample Output shape: torch.Size([32, 3, 512, 512])
CNO2d(
  (lift): LiftProjectBlock(
    (inter_CNOBlock): CNOBlock(
      (convolution): Conv2d(3, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
    (convolution): Conv2d(64, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (project): LiftProjectBlock(
    (inter_CNOBlock): CNOBlock(
      (convolution): Conv2d(16, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
    (convolution): Conv2d(64, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
  (encoder): ModuleList(
    (0): CNOBlock(
      (convolution): Conv2d(8, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
  )
  (ED_expansion): ModuleList(
    (0): CNOBlock(
      (convolution): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
    (1): CNOBlock(
      (convolution): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
  )
  (decoder): ModuleList(
    (0): CNOBlock(
      (convolution): Conv2d(16, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      (batch_norm): Identity()
      (act): CNO_LReLu(
        (act): LeakyReLU(negative_slope=0.01)
      )
    )
  )
  (res_net_neck): ResNet(
    (res_nets): Sequential(
      (0): ResidualBlock(
        (convolution1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (convolution2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (batch_norm1): Identity()
        (batch_norm2): Identity()
        (act): CNO_LReLu(
          (act): LeakyReLU(negative_slope=0.01)
        )
      )
      (1): ResidualBlock(
        (convolution1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (convolution2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (batch_norm1): Identity()
        (batch_norm2): Identity()
        (act): CNO_LReLu(
          (act): LeakyReLU(negative_slope=0.01)
        )
      )
      (2): ResidualBlock(
        (convolution1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (convolution2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (batch_norm1): Identity()
        (batch_norm2): Identity()
        (act): CNO_LReLu(
          (act): LeakyReLU(negative_slope=0.01)
        )
      )
      (3): ResidualBlock(
        (convolution1): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (convolution2): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        (batch_norm1): Identity()
        (batch_norm2): Identity()
        (act): CNO_LReLu(
          (act): LeakyReLU(negative_slope=0.01)
        )
      )
    )
  )
  (res_nets): Sequential(
    (0): ResNet(
      (res_nets): Sequential(
        (0): ResidualBlock(
          (convolution1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (convolution2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (batch_norm1): Identity()
          (batch_norm2): Identity()
          (act): CNO_LReLu(
            (act): LeakyReLU(negative_slope=0.01)
          )
        )
        (1): ResidualBlock(
          (convolution1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (convolution2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (batch_norm1): Identity()
          (batch_norm2): Identity()
          (act): CNO_LReLu(
            (act): LeakyReLU(negative_slope=0.01)
          )
        )
        (2): ResidualBlock(
          (convolution1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (convolution2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (batch_norm1): Identity()
          (batch_norm2): Identity()
          (act): CNO_LReLu(
            (act): LeakyReLU(negative_slope=0.01)
          )
        )
        (3): ResidualBlock(
          (convolution1): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (convolution2): Conv2d(8, 8, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (batch_norm1): Identity()
          (batch_norm2): Identity()
          (act): CNO_LReLu(
            (act): LeakyReLU(negative_slope=0.01)
          )
        )
      )
    )
  )
)
[1;34mwandb[0m: 
[1;34mwandb[0m: ðŸš€ View run [33meager-armadillo-4[0m at: [34mhttps://wandb.ai/rohanvk-carnegie-mellon-university/cno2d/runs/byg3jwnl[0m
[1;34mwandb[0m: Find logs at: [1;35mwandb/run-20250620_143528-byg3jwnl/logs[0m
Job completed at Fri Jun 20 14:35:33 EDT 2025
