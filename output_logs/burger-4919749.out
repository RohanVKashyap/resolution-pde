Job started on babel-10-17 at Wed May 21 18:00:13 EDT 2025
Job ID: 4919749
GPU information:
Wed May 21 18:00:13 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 575.51.03              Driver Version: 575.51.03      CUDA Version: 12.9     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA RTX 6000 Ada Gene...    On  |   00000000:01:00.0 Off |                  Off |
| 30%   29C    P8             20W /  300W |       2MiB /  49140MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
|   1  NVIDIA RTX 6000 Ada Gene...    On  |   00000000:41:00.0 Off |                  Off |
| 30%   25C    P8             28W /  300W |       2MiB /  49140MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
CUDA devices:
CUDA_VISIBLE_DEVICES: 0,1
Using device: cuda
[2025-05-21 18:00:17,344][root][INFO] - model:
  _target_: models.s4_2d.S4NDModel
  d_input: 15
  d_output: 3
  d_model: 64
  n_layers: 4
  dropout: 0.2
  prenorm: false
dataset:
  reduced_batch: 1
  reduced_resolution: 1
  reduced_resolution_t: 4
  window_size: 15
  original_res: 512
  pde: navier_stokes_0
  data_path1: data/pdebench/ns_incom_inhom_2d_512-0.hdf5
training:
  batch_size: 4
  epochs: 100
  learning_rate: 0.001
  use_normalizer: false
project_name: ${dataset.pde}_${hydra:runtime.choices.model}
checkpoint_dir: checkpoints

Project name: navier_stokes_0_s4_2d/s4_2d
Model name: models.s4_2d.S4NDModel
PDE Dataset: navier_stokes_0
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 256, 256, 3)
x shape: torch.Size([940, 45, 256, 256])
y shape: torch.Size([940, 3, 256, 256])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
<class 'torch.Tensor'> -0.0166463740170002 -0.01887289620935917 0.8625447154045105 0.9031019806861877
Sample Input shape: torch.Size([4, 45, 256, 256])
Sample Output shape: torch.Size([4, 3, 256, 256])
[2025-05-21 18:00:50,769][models.s4][WARNING] - CUDA extension for structured kernels (Cauchy and Vandermonde multiplication) not found. Install by going to extensions/kernels/ and running `python setup.py install`, for improved speed and memory efficiency. Note that the kernel changed for state-spaces 4.0 and must be recompiled.
[KeOps] Compiling cuda jit compiler engine ... OK
[pyKeOps] Compiling nvrtc binder for python ... OK
[2025-05-21 18:00:56,868][models.s4][INFO] - Pykeops installation found.
[2025-05-21 18:00:56,872][models.s4nd][WARNING] - CUDA extension for structured kernels (Cauchy and Vandermonde multiplication) not found. Install by going to extensions/kernels/ and running `python setup.py install`, for improved speed and memory efficiency. Note that the kernel changed for state-spaces 4.0 and must be recompiled.
[2025-05-21 18:00:56,872][models.s4nd][INFO] - Pykeops installation found.
Loaded model from path: ./checkpoints/s4ndmodel/navier_stokes_0_4863591.pt
S4NDModel(
  (encoder): Linear(in_features=47, out_features=64, bias=True)
  (s4_layers): ModuleList(
    (0-3): 4 x S4ND(
      (kernel): ModuleList(
        (0-1): 2 x SSMKernelDPLR()
      )
    )
  )
  (norms): ModuleList(
    (0-3): 4 x LayerNorm((64,), eps=1e-05, elementwise_affine=True)
  )
  (dropouts): ModuleList(
    (0-3): 4 x Dropout(p=0.2, inplace=False)
  )
  (decoder): Linear(in_features=64, out_features=3, bias=True)
)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 512, 512, 3)
x shape: torch.Size([940, 45, 512, 512])
y shape: torch.Size([940, 3, 512, 512])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
Original test data shape: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Testing resolutions: [512]

Evaluating at resolution: 512
Downsampled shapes: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
[KeOps] Generating code for Sum_Reduction reduction (with parameters 0) of formula ComplexMult(Real2Complex(1/ComplexSquareAbs(ComplexMult(b-c,b-Conj(c)))),ComplexMult(b*ComplexReal(a)-Real2Complex(a|c),Conj(ComplexMult(b-c,b-Conj(c))))) with a=Var(0,2,1), b=Var(1,2,0), c=Var(2,2,1) ... OK
Error evaluating resolution 512: CUDA out of memory. Tried to allocate 16.00 GiB. GPU 0 has a total capacity of 47.37 GiB of which 7.69 GiB is free. Including non-PyTorch memory, this process has 39.67 GiB memory in use. Of the allocated memory 39.17 GiB is allocated by PyTorch, and 13.39 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 128, 128, 3)
x shape: torch.Size([940, 45, 128, 128])
y shape: torch.Size([940, 3, 128, 128])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
<class 'torch.Tensor'> -0.01566825993359089 -0.02086322195827961 0.8382754325866699 0.8714245557785034
Sample Input shape: torch.Size([4, 45, 128, 128])
Sample Output shape: torch.Size([4, 3, 128, 128])
Loaded model from path: ./checkpoints/s4ndmodel/navier_stokes_0_4863592.pt
S4NDModel(
  (encoder): Linear(in_features=47, out_features=64, bias=True)
  (s4_layers): ModuleList(
    (0-3): 4 x S4ND(
      (kernel): ModuleList(
        (0-1): 2 x SSMKernelDPLR()
      )
    )
  )
  (norms): ModuleList(
    (0-3): 4 x LayerNorm((64,), eps=1e-05, elementwise_affine=True)
  )
  (dropouts): ModuleList(
    (0-3): 4 x Dropout(p=0.2, inplace=False)
  )
  (decoder): Linear(in_features=64, out_features=3, bias=True)
)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 512, 512, 3)
x shape: torch.Size([940, 45, 512, 512])
y shape: torch.Size([940, 3, 512, 512])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
Original test data shape: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Testing resolutions: [256, 512]

Evaluating at resolution: 256
Downsampled shapes: x=torch.Size([94, 45, 256, 256]), y=torch.Size([94, 3, 256, 256])
Resolution 256 - Relative L2 Loss: 0.568544

Evaluating at resolution: 512
Downsampled shapes: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Error evaluating resolution 512: CUDA out of memory. Tried to allocate 16.03 GiB. GPU 0 has a total capacity of 47.37 GiB of which 7.69 GiB is free. Including non-PyTorch memory, this process has 39.68 GiB memory in use. Of the allocated memory 23.18 GiB is allocated by PyTorch, and 16.00 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 64, 64, 3)
x shape: torch.Size([940, 45, 64, 64])
y shape: torch.Size([940, 3, 64, 64])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
<class 'torch.Tensor'> -0.014858070760965347 -0.030746156349778175 1.2829495668411255 1.283828854560852
Sample Input shape: torch.Size([4, 45, 64, 64])
Sample Output shape: torch.Size([4, 3, 64, 64])
Loaded model from path: ./checkpoints/s4ndmodel/navier_stokes_0_4863593.pt
S4NDModel(
  (encoder): Linear(in_features=47, out_features=64, bias=True)
  (s4_layers): ModuleList(
    (0-3): 4 x S4ND(
      (kernel): ModuleList(
        (0-1): 2 x SSMKernelDPLR()
      )
    )
  )
  (norms): ModuleList(
    (0-3): 4 x LayerNorm((64,), eps=1e-05, elementwise_affine=True)
  )
  (dropouts): ModuleList(
    (0-3): 4 x Dropout(p=0.2, inplace=False)
  )
  (decoder): Linear(in_features=64, out_features=3, bias=True)
)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 512, 512, 3)
x shape: torch.Size([940, 45, 512, 512])
y shape: torch.Size([940, 3, 512, 512])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
Original test data shape: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Testing resolutions: [128, 256, 512]

Evaluating at resolution: 128
Downsampled shapes: x=torch.Size([94, 45, 128, 128]), y=torch.Size([94, 3, 128, 128])
Resolution 128 - Relative L2 Loss: 0.318275

Evaluating at resolution: 256
Downsampled shapes: x=torch.Size([94, 45, 256, 256]), y=torch.Size([94, 3, 256, 256])
Resolution 256 - Relative L2 Loss: 0.460960

Evaluating at resolution: 512
Downsampled shapes: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Error evaluating resolution 512: CUDA out of memory. Tried to allocate 16.03 GiB. GPU 0 has a total capacity of 47.37 GiB of which 7.69 GiB is free. Including non-PyTorch memory, this process has 39.68 GiB memory in use. Of the allocated memory 23.18 GiB is allocated by PyTorch, and 16.00 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 32, 32, 3)
x shape: torch.Size([940, 45, 32, 32])
y shape: torch.Size([940, 3, 32, 32])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
<class 'torch.Tensor'> -0.027723703533411026 -0.03540841490030289 1.101298451423645 1.1192502975463867
Sample Input shape: torch.Size([4, 45, 32, 32])
Sample Output shape: torch.Size([4, 3, 32, 32])
Loaded model from path: ./checkpoints/s4ndmodel/navier_stokes_0_4863594.pt
S4NDModel(
  (encoder): Linear(in_features=47, out_features=64, bias=True)
  (s4_layers): ModuleList(
    (0-3): 4 x S4ND(
      (kernel): ModuleList(
        (0-1): 2 x SSMKernelDPLR()
      )
    )
  )
  (norms): ModuleList(
    (0-3): 4 x LayerNorm((64,), eps=1e-05, elementwise_affine=True)
  )
  (dropouts): ModuleList(
    (0-3): 4 x Dropout(p=0.2, inplace=False)
  )
  (decoder): Linear(in_features=64, out_features=3, bias=True)
)
Loading from file: /home/rvk/data/pdebench/ns_incom_inhom_2d_512-0.hdf5
Available keys: ['force', 'particles', 't', 'velocity']
Velocity data shape: (4, 1000, 512, 512, 2)
Particles data shape: (4, 1000, 512, 512, 1)
Time data shape: (4, 250)
Combined data shape: (4, 250, 512, 512, 3)
x shape: torch.Size([940, 45, 512, 512])
y shape: torch.Size([940, 3, 512, 512])
---------Using data normalizer---------------
Train dataset size: 752
Validation dataset size: 94
Test dataset size: 94
Original test data shape: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Testing resolutions: [64, 128, 256, 512]

Evaluating at resolution: 64
Downsampled shapes: x=torch.Size([94, 45, 64, 64]), y=torch.Size([94, 3, 64, 64])
Resolution 64 - Relative L2 Loss: 0.281983

Evaluating at resolution: 128
Downsampled shapes: x=torch.Size([94, 45, 128, 128]), y=torch.Size([94, 3, 128, 128])
Resolution 128 - Relative L2 Loss: 0.648409

Evaluating at resolution: 256
Downsampled shapes: x=torch.Size([94, 45, 256, 256]), y=torch.Size([94, 3, 256, 256])
Resolution 256 - Relative L2 Loss: 0.871317

Evaluating at resolution: 512
Downsampled shapes: x=torch.Size([94, 45, 512, 512]), y=torch.Size([94, 3, 512, 512])
Error evaluating resolution 512: CUDA out of memory. Tried to allocate 16.03 GiB. GPU 0 has a total capacity of 47.37 GiB of which 7.69 GiB is free. Including non-PyTorch memory, this process has 39.68 GiB memory in use. Of the allocated memory 23.18 GiB is allocated by PyTorch, and 16.00 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Job completed at Wed May 21 18:04:24 EDT 2025
