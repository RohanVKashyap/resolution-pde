Job started on babel-1-27 at Tue Sep 23 16:00:04 EDT 2025
Job ID: 5569144
GPU information:
Tue Sep 23 16:00:04 2025       
+-----------------------------------------------------------------------------------------+
| NVIDIA-SMI 575.51.03              Driver Version: 575.51.03      CUDA Version: 12.9     |
|-----------------------------------------+------------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |
|                                         |                        |               MIG M. |
|=========================================+========================+======================|
|   0  NVIDIA RTX A6000               On  |   00000000:01:00.0 Off |                  Off |
| 30%   47C    P8             32W /  300W |       1MiB /  49140MiB |      0%      Default |
|                                         |                        |                  N/A |
+-----------------------------------------+------------------------+----------------------+
                                                                                         
+-----------------------------------------------------------------------------------------+
| Processes:                                                                              |
|  GPU   GI   CI              PID   Type   Process name                        GPU Memory |
|        ID   ID                                                               Usage      |
|=========================================================================================|
|  No running processes found                                                             |
+-----------------------------------------------------------------------------------------+
CUDA devices:
CUDA_VISIBLE_DEVICES: 0
/home/rvk
Using device: cuda
[2025-09-23 16:00:12,207][root][INFO] - model:
  _target_: models.unet.UNet2d
  in_channels: 1
  out_channels: 1
  width: 64
dataset:
  dataset_params:
    _target_: dataloaders.ns_naive_true_multires.ns_true_multires_markov_dataset
    saved_folder: /data/user_data/rvk/ns_data
    file_extension: .h5
    viscosity: '0.001'
    reduced_batch: 1
    reduced_resolution_t: 1
    data_mres_size:
      256: 300
      128: 0
      64: 0
    add_res:
    - 32
    add_res_samples:
      32: 700
    downsample_from_res: 64
    data_normalizer: true
    normalization_type: simple
    num_samples_max: -1
    eval_dataset_target: dataloaders.ns_naive_markov.ns_markov_dataset
    eval_filename: ns_256_0.001.h5
    eval_saved_folder: /data/user_data/rvk/ns_data
  resize_to_train: false
  evaluation_type: naive_downsample
  window_size: 15
  original_res: 256
  max_test_resolution: 256
  train_mres: true
  pde: ns
training:
  batch_size: 16
  epochs: 100
  learning_rate: 0.001
  use_normalizer: false
project_name: ${dataset.pde}_${hydra:runtime.choices.model}
checkpoint_dir: checkpoints

Project name: ns_unet/unet_2d
Model name: models.unet.UNet2d
PDE Dataset: ns
This is True Multi-Resolution Training. Train Resolution is the highest data resolution in the multi-resolution data
---------------------
Creating true multi-resolution Navier-Stokes dataset from /data/user_data/rvk/ns_data
Viscosity: 0.001, File extension: .h5
Target samples per resolution: {256: 300, 128: 0, 64: 0}
Additional downsampled resolutions: [32]
Target samples per downsampled resolution: {32: 700}
Will downsample from resolution: 64
Loading Navier-Stokes multi-resolution data from /data/user_data/rvk/ns_data
Viscosity: 0.001, File extension: .h5
Target samples per resolution (from files): {256: 300, 128: 0, 64: 0}
Additional downsampled resolutions: [32]
Target samples per downsampled resolution: {32: 700}
Will downsample from resolution: 64
Loading resolution 256 from /data/user_data/rvk/ns_data/ns_256_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Raw data shape for 256: (1000, 256, 256, 32)
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Converted to shape: (1000, 32, 256, 256, 1)
  After reduction: (1000, 32, 256, 256, 1)
  Split 'train' data shape: (800, 32, 256, 256, 1)
  Subsampled to 240 samples for train split
  Added 7200 sample pairs from resolution 256
Adding downsampled resolutions: [32]
Adding downsampled data from /data/user_data/rvk/ns_data/ns_64_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Added 16800 downsampled samples at resolution 32
Total samples loaded: 24000
Resolution distribution:
  256_file: 7200 samples
  32_downsampled: 16800 samples
Sample x shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
Sample y shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
Loading Navier-Stokes multi-resolution data from /data/user_data/rvk/ns_data
Viscosity: 0.001, File extension: .h5
Target samples per resolution (from files): {256: 300, 128: 0, 64: 0}
Additional downsampled resolutions: [32]
Target samples per downsampled resolution: {32: 700}
Will downsample from resolution: 64
Loading resolution 256 from /data/user_data/rvk/ns_data/ns_256_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Raw data shape for 256: (1000, 256, 256, 32)
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Converted to shape: (1000, 32, 256, 256, 1)
  After reduction: (1000, 32, 256, 256, 1)
  Split 'val' data shape: (100, 32, 256, 256, 1)
  Using all 100 samples for val split
  Added 3000 sample pairs from resolution 256
Adding downsampled resolutions: [32]
Adding downsampled data from /data/user_data/rvk/ns_data/ns_64_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Added 2100 downsampled samples at resolution 32
Total samples loaded: 5100
Resolution distribution:
  256_file: 3000 samples
  32_downsampled: 2100 samples
Sample x shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
Sample y shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
Loading Navier-Stokes multi-resolution data from /data/user_data/rvk/ns_data
Viscosity: 0.001, File extension: .h5
Target samples per resolution (from files): {256: 300, 128: 0, 64: 0}
Additional downsampled resolutions: [32]
Target samples per downsampled resolution: {32: 700}
Will downsample from resolution: 64
Loading resolution 256 from /data/user_data/rvk/ns_data/ns_256_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Raw data shape for 256: (1000, 256, 256, 32)
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Converted to shape: (1000, 32, 256, 256, 1)
  After reduction: (1000, 32, 256, 256, 1)
  Split 'test' data shape: (100, 32, 256, 256, 1)
  Using all 100 samples for test split
  Added 3000 sample pairs from resolution 256
Adding downsampled resolutions: [32]
Adding downsampled data from /data/user_data/rvk/ns_data/ns_64_0.001.h5
  Loading .h5 file...
  Available keys: ['a', 't', 'u']
  Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
  Added 2100 downsampled samples at resolution 32
Total samples loaded: 5100
Resolution distribution:
  256_file: 3000 samples
  32_downsampled: 2100 samples
Sample x shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
Sample y shapes: [(1, 256, 256), (1, 256, 256), (1, 256, 256)]
---------Using simple global normalization---------------
Global statistics: X(mean=-0.000000, std=0.622316), Y(mean=-0.000000, std=0.641109)

Final dataset sizes:
Train dataset size: 24000
Validation dataset size: 5100
Test dataset size: 5100
<dataloaders.ns_naive_true_multires.ns_true_multires_markov_dataset.<locals>.SimpleNormalizedDataset object at 0x155173c44b90>
Created resolution groups:
  Resolution 256: 7200 samples
  Resolution 32: 16800 samples
Created resolution groups:
  Resolution 256: 3000 samples
  Resolution 32: 2100 samples
Created resolution groups:
  Resolution 256: 3000 samples
  Resolution 32: 2100 samples
<class 'torch.Tensor'> 2.0954757928848267e-09 4.307366907596588e-09 0.9398649334907532 0.9442551732063293
UNet2d(
  (encoder1): Sequential(
    (enc1conv1): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc1norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc1tanh1): Tanh()
    (enc1conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc1norm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc1tanh2): Tanh()
  )
  (pool1): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (encoder2): Sequential(
    (enc2conv1): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc2norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc2tanh1): Tanh()
    (enc2conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc2norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc2tanh2): Tanh()
  )
  (pool2): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (encoder3): Sequential(
    (enc3conv1): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc3norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc3tanh1): Tanh()
    (enc3conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc3norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc3tanh2): Tanh()
  )
  (pool3): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (encoder4): Sequential(
    (enc4conv1): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc4norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc4tanh1): Tanh()
    (enc4conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (enc4norm2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (enc4tanh2): Tanh()
  )
  (pool4): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  (bottleneck): Sequential(
    (bottleneckconv1): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bottlenecknorm1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bottlenecktanh1): Tanh()
    (bottleneckconv2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bottlenecknorm2): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (bottlenecktanh2): Tanh()
  )
  (upconv4): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))
  (decoder4): Sequential(
    (dec4conv1): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec4norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec4tanh1): Tanh()
    (dec4conv2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec4norm2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec4tanh2): Tanh()
  )
  (upconv3): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))
  (decoder3): Sequential(
    (dec3conv1): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec3norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec3tanh1): Tanh()
    (dec3conv2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec3norm2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec3tanh2): Tanh()
  )
  (upconv2): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
  (decoder2): Sequential(
    (dec2conv1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec2norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec2tanh1): Tanh()
    (dec2conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec2norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec2tanh2): Tanh()
  )
  (upconv1): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
  (decoder1): Sequential(
    (dec1conv1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec1norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec1tanh1): Tanh()
    (dec1conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (dec1norm2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (dec1tanh2): Tanh()
  )
  (conv): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
)
Total Model Parameters: 31.04M
Trainable Parameters: 31.04M
Epoch 0, Train Loss: 0.16004640, Val Loss: 0.33258856
Epoch 10, Train Loss: 0.05084882, Val Loss: 0.04704449
Epoch 20, Train Loss: 0.03801070, Val Loss: 0.04954521
Epoch 30, Train Loss: 0.02997839, Val Loss: 0.04775249
Epoch 40, Train Loss: 0.02532346, Val Loss: 0.05371247
Epoch 50, Train Loss: 0.02441121, Val Loss: 0.06320116
Epoch 60, Train Loss: 0.01933683, Val Loss: 0.05728809
Epoch 70, Train Loss: 0.01731108, Val Loss: 0.05808309
Epoch 80, Train Loss: 0.01641034, Val Loss: 0.05771166
Epoch 90, Train Loss: 0.01406847, Val Loss: 0.05339968
Test L2 Loss: 0.058409
Model saved to checkpoints/unet2d/ns_5569144.pt
Created/verified figures directory: figures/5569144
Evaluating 2D NS model at multiple resolutions
Using normalizer from training resolution 256
Testing resolutions: [32, 64, 128, 256]
Loading from file: /data/user_data/rvk/ns_data/ns_256_0.001.h5
Loading .h5 file...
Available keys: ['a', 't', 'u']
H5 data shape before any processing: (1000, 256, 256, 32)
Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
Raw data shape: (1000, 32, 256, 256)
Converted to shape: (1000, 32, 256, 256, 1)
After reduction: (1000, 32, 32, 32, 1)
Markov pairs - x: (1000, 30, 32, 32, 1), y: (1000, 30, 32, 32, 1)
Final x shape: torch.Size([30000, 1, 32, 32])
Final y shape: torch.Size([30000, 1, 32, 32])
Dataset splits - Train: 24000, Val: 3000, Test: 3000

Final dataset sizes:
Train dataset size: 24000
Validation dataset size: 3000
Test dataset size: 3000
Selected random indices for plotting: [304, 1691, 1325, 548, 551, 1366, 146, 160, 695, 501]
Collected 10 examples for resolution 32
Resolution 32 (downsample factor: 8) - Relative L2 Loss: 0.042946
Memory cleaned after resolution 32


Loading from file: /data/user_data/rvk/ns_data/ns_256_0.001.h5
Loading .h5 file...
Available keys: ['a', 't', 'u']
H5 data shape before any processing: (1000, 256, 256, 32)
Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
Raw data shape: (1000, 32, 256, 256)
Converted to shape: (1000, 32, 256, 256, 1)
After reduction: (1000, 32, 64, 64, 1)
Markov pairs - x: (1000, 30, 64, 64, 1), y: (1000, 30, 64, 64, 1)
Final x shape: torch.Size([30000, 1, 64, 64])
Final y shape: torch.Size([30000, 1, 64, 64])
Dataset splits - Train: 24000, Val: 3000, Test: 3000

Final dataset sizes:
Train dataset size: 24000
Validation dataset size: 3000
Test dataset size: 3000
Collected 10 examples for resolution 64
Resolution 64 (downsample factor: 4) - Relative L2 Loss: 0.104534
Memory cleaned after resolution 64


Loading from file: /data/user_data/rvk/ns_data/ns_256_0.001.h5
Loading .h5 file...
Available keys: ['a', 't', 'u']
H5 data shape before any processing: (1000, 256, 256, 32)
Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
Raw data shape: (1000, 32, 256, 256)
Converted to shape: (1000, 32, 256, 256, 1)
After reduction: (1000, 32, 128, 128, 1)
Markov pairs - x: (1000, 30, 128, 128, 1), y: (1000, 30, 128, 128, 1)
Final x shape: torch.Size([30000, 1, 128, 128])
Final y shape: torch.Size([30000, 1, 128, 128])
Dataset splits - Train: 24000, Val: 3000, Test: 3000

Final dataset sizes:
Train dataset size: 24000
Validation dataset size: 3000
Test dataset size: 3000
Collected 10 examples for resolution 128
Resolution 128 (downsample factor: 2) - Relative L2 Loss: 0.091636
Memory cleaned after resolution 128


Loading from file: /data/user_data/rvk/ns_data/ns_256_0.001.h5
Loading .h5 file...
Available keys: ['a', 't', 'u']
H5 data shape before any processing: (1000, 256, 256, 32)
Detected (batch, height, width, time) format, transposing to (batch, time, height, width)
Raw data shape: (1000, 32, 256, 256)
Converted to shape: (1000, 32, 256, 256, 1)
After reduction: (1000, 32, 256, 256, 1)
Markov pairs - x: (1000, 30, 256, 256, 1), y: (1000, 30, 256, 256, 1)
Final x shape: torch.Size([30000, 1, 256, 256])
Final y shape: torch.Size([30000, 1, 256, 256])
Dataset splits - Train: 24000, Val: 3000, Test: 3000

Final dataset sizes:
Train dataset size: 24000
Validation dataset size: 3000
Test dataset size: 3000
Collected 10 examples for resolution 256
Resolution 256 (downsample factor: 1) - Relative L2 Loss: 0.067341
Memory cleaned after resolution 256


Creating 2D prediction vs target plots...
Saved main 2D comparison plot: figures/5569144/prediction_plots/ns_2d_main_comparison.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_1_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_2_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_3_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_4_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_5_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_6_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_7_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_8_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_9_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_32_example_10_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_1_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_2_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_3_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_4_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_5_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_6_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_7_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_8_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_9_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_64_example_10_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_1_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_2_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_3_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_4_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_5_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_6_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_7_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_8_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_9_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_128_example_10_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_1_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_2_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_3_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_4_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_5_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_6_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_7_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_8_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_9_20250923_190840.png
Saved individual 2D plot: figures/5569144/prediction_plots/ns_2d_res_256_example_10_20250923_190840.png
Created individual plots for 10 examples at each resolution
Saved numerical results: figures/5569144/ns_1d_evaluation_results_20250923_190914.csv
Saved summary: figures/5569144/ns_1d_evaluation_summary_20250923_190914.txt

==================================================
2D NS EVALUATION SUMMARY
==================================================
Resolution  32x 32: 0.042946
Resolution  64x 64: 0.104534
Resolution 128x128: 0.091636
Resolution 256x256: 0.067341
[2025-09-23 19:09:14,914][numexpr.utils][INFO] - Note: detected 128 virtual cores but NumExpr set to maximum of 64, check "NUMEXPR_MAX_THREADS" environment variable.
[2025-09-23 19:09:14,915][numexpr.utils][INFO] - Note: NumExpr detected 128 cores but "NUMEXPR_MAX_THREADS" not set, so enforcing safe limit of 16.
[2025-09-23 19:09:14,915][numexpr.utils][INFO] - NumExpr defaulting to 16 threads.

Summary of Super-Resolution Evaluation:
Resolution factor 32: Relative L2 Loss = 0.042946
Resolution factor 64: Relative L2 Loss = 0.104534
Resolution factor 128: Relative L2 Loss = 0.091636
Resolution factor 256: Relative L2 Loss = 0.067341

Evaluation plots saved to: figures/5569144
Wandb run: https://wandb.ai/rohanvk-carnegie-mellon-university/unet2d/runs/wpovm6c1
Job completed at Tue Sep 23 19:09:26 EDT 2025
